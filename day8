-inline level element ( this가 둘러싸고있는 내용의 양에 따라 크기 결정 )
  ex) <span>, <strong>, <em>
  1) 정렬 방식 => 수평정렬
  2) width ( 너비 ) = content element 의 길이나 양에 따라 변화
  3) inline 요소는 block 요소의 자식 계층으로만 사용 가능
     => inline level element 끼리는 대부분 부모/자식 계층으로 사용 가능
      => 예외 : 
  
  
-Block level element ( 가로영역 전체를 차지하는 블록 ) { display : block; }
  ex) <p>, <div>, <h1>~<h6>
  1) 정렬 방식 => 수직정렬/상하정렬
  2) width ( 너비 ) => 부모태그의 가로 폭의 전체
  3) 태그의 크기와 상관없이 전체 차지
  4) Block 요소는 inline 요소의 부모 계층으로만 사용 가능
  5) Block level 의 요소는 계층 관계가 서로 다르다 ex) <div><h1>가능</h1></div>, <h1><p>불가능</p></h1>
  
-상속( css )
  - 표준화된 계층 ( 문법에 맞는 계층 )
  - 부모요소에 css를 적용하면 자손 요소에 css값이 전달된다.
  - <h> 태그들은 상속시 원래 가지고있던 특성들은 고정된다. ( 우선순위 : 직접 설정한 속성 > 디폴트 값 > 상속받은 속성 )

-class, id 문법
  - 태그에 이름을 부여 => 의미있게 네이밍
  - 클래스/아이디 명 => 영문(대/소),숫자,_,- 가능, 첫글자는 영문
  - 
  1)class
    - <태그명 class="클래스명">
    - 두단어 이상 사용
     => 언더스코어 표기법 : notice_tit / submit_btn
     => 카멜 표기법 : noticeTit / submitBtn ( 주 사용 )
     => 스네이크 표기법 : notice-tit / submit-btn
    - 클래스 사용법 : .클래스명 {} = 태그명.클래스명 {}
    - 각각의 요소를 타겟팅 할 수 있다
    - 동일한 이름을 사용할 수 있다.
    - 여러태그 ( 종류가 다른 ) 에 동시에 사용 가능하다.
    - 하나의 태그에 여러개의 클래스명을 부여할 수 있다. ( 다중 클래스 )
      => <태그 class="클래스명1 클래스명2 클래스명3 ...">
      
     - 태그의 타겟팅( 선택자 ) 역활에만 사용 
  2)id
    - <태그명 id="아이디명"> => #아이디명 {}
    - 각각의 요소만 타켓팅 할 수 있다. ( 한 html 페이지에 아이디는 하나만 존재한다 )
    - 하나의 태그에 하나의 id만 존재 가능하다.
    - 태그의 타겟팅 + 또 다른 역활( javascript 에서 호출 )
  
* 우선순위( css )
  같은 코드일 경우 css코드의 하단에 위치한 속성이 우선순위가 높다
  태그명 < class명 < id명
  class명 id명 하나의 태그에 동시에 사용 가능

* class, id 동시 호출 가능 => ex) .class명,#id명,.class명 {}
  
  
  
  
 
